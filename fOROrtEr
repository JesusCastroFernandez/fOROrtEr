def gauss_jordan(matrix):
    rows = len(matrix)
    cols = len(matrix[0])

    for i in range(rows):
        # Pivoteo parcial
        max_row = i
        for j in range(i + 1, rows):
            if abs(matrix[j][i]) > abs(matrix[max_row][i]):
                max_row = j
        matrix[i], matrix[max_row] = matrix[max_row], matrix[i]

        # Verificar si el pivote es cercano a cero
        if abs(matrix[i][i]) < 1e-10:
            raise ValueError("El sistema no tiene solución única")

        # Normalización del pivote
        pivot = matrix[i][i]
        for j in range(i, cols):
            matrix[i][j] /= pivot

        # Eliminación hacia adelante
        for j in range(rows):
            if j != i:
                factor = matrix[j][i]
                for k in range(i, cols):
                    matrix[j][k] -= factor * matrix[i][k]

    return matrix

# Ejemplo de uso
matrix = [
    [2, 3, 4, 10],
    [1, -1, 1, 5],
    [3, 4, 2, 14]
]

try:
    result = gauss_jordan(matrix)

    # Imprimir la solución
    for row in result:
        print(row[-1])

except ValueError as e:
    print(e)
